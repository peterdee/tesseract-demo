#!/usr/bin/env node
const debug = require('debug')('tesseract-demo:server');
const http = require('http');

const app = require('../app');

/**
 * Normalize application port
 * @param {*} val - port or named pipe
 * @returns {boolean|number}
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (Number.isNaN(Number(port))) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

const port = (process.env.PORT && normalizePort(process.env.PORT)) || 1111;
app.set('port', port);

const server = http.createServer(app);
server.listen(port);

/**
 * If there's an error
 */
server.on('error', (error) => {
  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  if (error.code) {
    switch (error.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        return process.exit(1);
      case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        return process.exit(1);
      default:
        throw error;
    }
  }

  throw error;
});

/**
 * If everything's fine
 */
server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${(addr && addr.port) || ''}`;
  debug(`Listening on ${bind}`);
});

module.exports = server;
